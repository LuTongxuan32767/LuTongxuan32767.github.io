/**
 * 定义一些全局的参数变量、常量、函数等
 */
if (!window.E5) {
	E5 = {};
}
jQuery.extend(E5, {
	Const : {
		// csrf token
		csrfToken : "HHCSRFToken"
	},
	Form : {}
});
/**
 * 采用form提交（post）的方式跳转.可在项目中代替window.open()避免在url后面传递参数，提高安全性 使用例子 var options={
 * formId:"formId", action:"/test.jsp", target:"_new",
 * params:{id:"1111",name:"张三"} };
 * 
 * $("body").postForward(options);
 * 
 * 注意： 1>提交时 会先清空指定form下的所有input 带有forward 属性 domain 2>通过参数传递自动生成的input 都带有
 * forward 属性
 */
(function($) {
	$.fn.extend({
		postForward : function(options) {
			var defaults = {
				formId : "PostForwardForm",// formID
				// 如果已经存在就是用现有的。注意提交时会先清空input dom
				action : null, // 需要提交到的url
				target : "_new", // 返回界面打开的位置。同html 的target 属性
				params : null,
				method : "post"
			// 参数，格式是json对象 key value格式
			};
			options = $.extend(defaults, options);
			return this.each(function() {
				var $this = $(this);
				$this.find(defaults.target).prop({
					src : ""
				});
				var form = $this.find("form[id=" + defaults.formId + "]");
				if (form.length <= 0) {
					form = $("<form></form>");
					form.appendTo($this);
				}
				form.find("input[forward]").remove();
				form.attr({
					"id" : defaults.formId,
					"action" : defaults.action,
					"target" : defaults.target,
					"method" : defaults.method ? defaults.method : "post"
				});
				$.extend(defaults.params, defaults.parms);
				if (defaults.params) {
					$.each(defaults.params, function(key, value) {
						var input = $("<input type='hidden' forward='true'> ");
						input.prop({
							"name" : key
						});
						input.val(value ? value : "");
						input.appendTo(form);
					});
				}
				form.submit();
				// form.remove();
			});
		}
	});
})(jQuery);
// 兼容之前的代码
var E3 = E5;
/**
 * var arr1=[{ "aa": "1", "bb": "2" }, { "aa": "3", "bb": "4"}];
 * 这种类型的对象数组进行序列化，以用来进行ajax请求 lName是提交的参数名称
 */
Array.prototype.serializeObject = function(lName) {
	var o = {};
	$t = this;
	for (var i = 0; i < $t.length; i++) {
		for ( var item in $t[i]) {
			var value = null;
			if ($t[i]) {
				value = $t[i][item];
			}
			o[lName + '[' + i + '].' + item.toString()] = value;
		}
	}
	return o;
};
/**
 * 通过$.param()方法，用于构造同名参数多个value的标准http请求参数方式
 * var xyz=[{'a':'shiyuan','age':32}];
 * 转换成[{name:a,value:shiyuan},{name:age,value:32}]
 */

Array.prototype.serialize = function() {
	var a=[];
	$t = this;
	for (var i = 0; i < $t.length; i++) {
		for ( var item in $t[i]) {
			var o = {};
			o.name=item.toString();
			o.value=$t[i][item].toString();
			a.push(o);
		}
	}
	return a;
};
$.extend(E5, {
	reflect : {
		fetchData : function(data, src) {
			/*
			 * If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the
			 * next level down. On each loop we test for undefined, and if found
			 * immediately return. This allows entire objects to be missing and
			 * sDefaultContent to be used if defined, rather than throwing an
			 * error
			 */
			var __reArray = /\[.*?\]$/;
			var __reFn = /\(\)$/;
			var arrayNotation, funcNotation, out, innerSrc;
			if (src !== "") {
				var a = $.map(src.match(/(\\.|[^\.])+/g) || [ '' ], function(s) {
					return s.replace(/\\./g, '.');
				});
				;
				for (var i = 0, iLen = a.length; i < iLen; i++) {
					// Check if we are dealing with special notation
					arrayNotation = a[i].match(__reArray);
					funcNotation = a[i].match(__reFn);
					if (arrayNotation) {
						// Array notation
						a[i] = a[i].replace(__reArray, '');
						// Condition allows simply [] to be passed in
						if (a[i] !== "") {
							data = data[a[i]];
						}
						out = [];
						// Get the remainder of the nested object to get
						a.splice(0, i + 1);
						innerSrc = a.join('.');
						// Traverse each entry in the array getting the
						// properties requested
						if ($.isArray(data)) {
							for (var j = 0, jLen = data.length; j < jLen; j++) {
								out.push(fetchData(data[j], type, innerSrc));
							}
						}
						// If a string is given in between the array notation
						// indicators, that
						// is used to join the strings together, otherwise an
						// array is returned
						var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
						data = (join === "") ? out : out.join(join);
						// The inner call to fetchData has already traversed
						// through the remainder
						// of the source requested, so we exit from the loop
						break;
					} else if (funcNotation) {
						// Function call
						a[i] = a[i].replace(__reFn, '');
						data = data[a[i]]();
						continue;
					}
					if (data === null || data[a[i]] === undefined) {
						return null;
					}
					data = data[a[i]];
				}
			}
			return data;
		}
	}
});
/**
 * loading插件
 * 
 * @param $
 */
(function($) {
	$.fn.extend({
		showLoading : function(options) {
			var defaults = {
				loadingClass : "transparent",
				zIndex : 800,
				msg : "正在加载...."
			};
			options = $.extend({}, defaults, options);
			return this.each(function() {
				var $this = $(this);
				var data = $this.data("olLoading");
				if (data) {
					$this.find(".ol_loading_mask").css({
						height : $this.height()
					});
					$this.find(".ol").show();
					return;
				}
				var position = $this.css("position");
				var width = $this.outerWidth();
				position = position == "absolute" ? "absolute" : "relative"
				width = width > 0 ? width : "";
				var loadingMask = $('<div class="ol ol_loading_mask"></div>');
				loadingMask.css({
					zIndex : options.zIndex,
					height : $this.height()
				});
				var loadingImg = $('<div class="ol ol_loading"></div>').css({
					"z-index" : options.zIndex + 1
				});
				var loadingMsg = $('<div class="ol ol_loading_msg"></div>').css("z-index", options.zIndex + 1);
				loadingMsg.text(options.msg);
				if (options.loadingClass) {
					loadingImg.addClass(options.loadingClass);
					loadingMask.addClass(options.loadingClass + "_mask");
					loadingMsg.addClass(options.loadingClass + "_msg");
				}
				loadingMask.append(loadingImg);//.append(loadingMsg);
				loadingMask.appendTo($this).show()
				$this.data("olLoading", options);
			});
		},
		hideLoading : function() {
			return this.each(function() {
				var $this = $(this);
				$this.parent().find(".ol_loading_mask,.ol_loading").hide();
			});
		}
	});
})(jQuery);
